#! /usr/bin/env ruby

require "pg"

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses"\
                              " ORDER BY created_on;")
    display_list(result)
  end

  def add_expense(amount, memo)
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, now());"
    @connection.exec_params(sql, [amount, memo])
  end

  def search_expense(term)
    pattern = '%' + term + '%'
    result = @connection.exec_params("SELECT * FROM expenses"\
                              " WHERE memo ILIKE $1"\
                              " ORDER BY created_on;", [pattern])
    display_list(result)
  end

  def delete_expense(id)
    result = @connection.exec_params("SELECT * FROM expenses"\
                                     " WHERE id = $1", [id])
    if result.values.empty?
      puts "There is no expense with the id '" + id + "'."
    else
      @connection.exec_params("DELETE FROM expenses WHERE id = $1", [id])
      puts "The following expense has been deleted:"
      display_expenses(result)
    end
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses;")
    puts "All expenses have been deleted."
  end

  private

  def display_list(expenses)
    if expenses.values.empty?
      puts "There are no expenses."
    else
      puts "There are #{expenses.ntuples} expense#{"s" if count != 1}."
      display_expenses(expenses)
      display_total(expenses.field_values('amount').map { |amount| amount.to_f})
    end
  end

  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [ tuple["id"].rjust(3),
                  tuple["created_on"].rjust(10),
                  tuple["amount"].rjust(12),
                  tuple["memo"] ]

      puts columns.join(" | ")
    end
  end

  def display_total(expenses)
    puts "-----------------------------------------------"
    puts "Total                  #{expenses.sum.round(2)}"
  end

  def setup_schema
    result = @connection.exec <<~SQL
      SELECT COUNT(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses';
    SQL
    if result[0]['count'].to_i.zero?
      @connection.exec <<~SQL
        CREATE TABLE expenses (
          id serial PRIMARY KEY,
          amount decimal(6, 2) NOT NULL CHECK (amount >= 0.01),
          memo text NOT NULL,
          created_on date NOT NULL);
      SQL
    end
  end
end

class CLI
  def initialize
    @app = ExpenseData.new
  end

  def run(argv)
    command = argv.first
    case command
    when 'list'
      @app.list_expenses
    when 'add'
      abort 'You must provide an amount and memo.' if argv.length != 3
      @app.add_expense(argv[1], argv[2])
    when 'search'
      abort 'You must provide a term to search for.' if argv.length != 2
      @app.search_expense(argv[1])
    when 'delete'
      abort 'You must provide an id to delete an expense.' if argv.length != 2
      @app.delete_expense(argv[1])
    when 'clear'
      puts 'This will remove all expenses. Are you sure? (y/n)'
      response = $stdin.getc
      response.upcase == 'Y' ? @app.delete_all_expenses : abort
    else
      display_help
    end
  end


  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)
